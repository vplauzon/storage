{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "variables": {
    "Unique ID": "[uniqueString(concat(resourceGroup().id, 'adls-acl-api'))]",
    "Identity Name": "[concat('data-lake-identity-', variables('Unique ID'))]",
    "Get ACL Name": "[concat('get-acl-api-', variables('Unique ID'))]",
    "List Blobs Name": "[concat('list-blobs-api-', variables('Unique ID'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[variables('Identity Name')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('Get ACL Name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]": {}
        }
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "actions": {
            "acls": {
              "inputs": "@split(outputs('data-lake-list').headers['x-ms-acl'], ',')",
              "runAfter": {
                "data-lake-list": [
                  "Succeeded"
                ]
              },
              "type": "Compose"
            },
            "split-colons": {
              "inputs": {
                "from": "@outputs('acls')",
                "select": "@split(item(), ':')"
              },
              "runAfter": {
                "acls": [
                  "Succeeded"
                ]
              },
              "type": "Select"
            },
            "data-lake-list": {
              "inputs": {
                "authentication": {
                  "audience": "https://storage.azure.com",
                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]",
                  "type": "ManagedServiceIdentity"
                },
                "headers": {
                  "x-ms-version": "2019-07-07"
                },
                "method": "HEAD",
                "uri": "@{outputs('url')}"
              },
              "runAfter": {
                "url": [
                  "Succeeded"
                ]
              },
              "type": "Http"
            },
            "default-acl": {
              "inputs": {
                "from": "@body('split-colons')",
                "where": "@equals(item()[0], 'default')"
              },
              "runAfter": {
                "split-colons": [
                  "Succeeded"
                ]
              },
              "type": "Query"
            },
            "non-default-acl": {
              "inputs": {
                "from": "@body('split-colons')",
                "where": "@not(equals(item()[0], 'default'))"
              },
              "runAfter": {
                "split-colons": [
                  "Succeeded"
                ]
              },
              "type": "Query"
            },
            "response-failure": {
              "inputs": {
                "body": "@coalesce(body('data-lake-list'), 'API failed')",
                "headers": {},
                "statusCode": "@coalesce(outputs('data-lake-list')['statusCode'], 500)"
              },
              "kind": "Http",
              "runAfter": {
                "data-lake-list": [
                  "Failed"
                ]
              },
              "type": "Response"
            },
            "response-success": {
              "inputs": {
                "body": {
                  "acl": {
                    "raw": "@{outputs('data-lake-list')['headers']['x-ms-acl']}",
                    "structured": {
                      "access": "@body('select-non-default-acl')",
                      "default": "@body('select-default-acl')"
                    }
                  },
                  "group": "@{outputs('data-lake-list')['headers']['x-ms-group']}",
                  "owner": "@{outputs('data-lake-list')['headers']['x-ms-owner']}",
                  "permissions": "@{outputs('data-lake-list')['headers']['x-ms-permissions']}"
                },
                "statusCode": 200
              },
              "kind": "Http",
              "runAfter": {
                "select-default-acl": [
                  "Succeeded"
                ],
                "select-non-default-acl": [
                  "Succeeded"
                ]
              },
              "type": "Response"
            },
            "select-default-acl": {
              "inputs": {
                "from": "@body('default-acl')",
                "select": {
                  "permissions": "@item()[3]",
                  "id": "@item()[2]",
                  "type": "@item()[1]"
                }
              },
              "runAfter": {
                "default-acl": [
                  "Succeeded"
                ]
              },
              "type": "Select"
            },
            "select-non-default-acl": {
              "inputs": {
                "from": "@body('non-default-acl')",
                "select": {
                  "permissions": "@item()[2]",
                  "id": "@item()[1]",
                  "type": "@item()[0]"
                }
              },
              "runAfter": {
                "non-default-acl": [
                  "Succeeded"
                ]
              },
              "type": "Select"
            },
            "url": {
              "inputs": "https://@{triggerBody()['storageAccount']}.dfs.core.windows.net/@{triggerBody()['container']}/@{triggerBody()?['path']}?action=getAccessControl&upn=@{coalesce(triggerBody()?['upn'], false)}",
              "runAfter": {},
              "type": "Compose"
            }
          },
          "contentVersion": "1.0.0.0",
          "outputs": {},
          "parameters": {},
          "triggers": {
            "manual": {
              "inputs": {
                "schema": {
                  "properties": {
                    "container": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "storageAccount": {
                      "type": "string"
                    },
                    "upn": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "storageAccount",
                    "container",
                    "path"
                  ],
                  "type": "object"
                }
              },
              "kind": "Http",
              "operationOptions": "EnableSchemaValidation",
              "type": "Request"
            }
          }
        },
        "parameters": {}
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[variables('List Blobs Name')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]"
      ],
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]": {}
        }
      },
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "parameters": {},
          "triggers": {
            "manual": {
              "type": "Request",
              "kind": "Http",
              "inputs": {
                "schema": {
                  "properties": {
                    "container": {
                      "type": "string"
                    },
                    "directory": {
                      "type": "string"
                    },
                    "doListDirectories": {
                      "type": "boolean"
                    },
                    "storageAccount": {
                      "type": "string"
                    },
                    "suffix": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "storageAccount",
                    "container"
                  ],
                  "type": "object"
                }
              },
              "operationOptions": "EnableSchemaValidation"
            }
          },
          "actions": {
            "base-url": {
              "runAfter": {
                "init-continuation": [
                  "Succeeded"
                ],
                "init-error": [
                  "Succeeded"
                ],
                "init-paths": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "https://@{triggerBody()['storageAccount']}.dfs.core.windows.net/@{triggerBody()['container']}?resource=filesystem&recursive=true"
            },
            "blobs": {
              "runAfter": {
                "until-continuation": [
                  "Succeeded"
                ]
              },
              "type": "Query",
              "inputs": {
                "from": "@variables('paths')",
                "where": "@not(equals(item()?['isDirectory'], 'true'))"
              }
            },
            "if-list-directories": {
              "actions": {
                "directories": {
                  "runAfter": {},
                  "type": "Query",
                  "inputs": {
                    "from": "@variables('paths')",
                    "where": "@equals(item()?['isDirectory'], 'true')"
                  }
                },
                "response-success-with-directories": {
                  "runAfter": {
                    "directories": [
                      "Succeeded"
                    ]
                  },
                  "type": "Response",
                  "kind": "Http",
                  "inputs": {
                    "body": {
                      "blobs": "@body('blobs')",
                      "directories": "@body('directories')"
                    },
                    "statusCode": 200
                  }
                }
              },
              "runAfter": {
                "blobs": [
                  "Succeeded"
                ]
              },
              "else": {
                "actions": {
                  "response-success-without-directories": {
                    "runAfter": {},
                    "type": "Response",
                    "kind": "Http",
                    "inputs": {
                      "body": {
                        "blobs": "@body('blobs')"
                      },
                      "statusCode": 200
                    }
                  }
                }
              },
              "expression": "@triggerBody()?['doListDirectories']",
              "type": "If"
            },
            "init-continuation": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "continuation",
                    "type": "string"
                  }
                ]
              }
            },
            "init-error": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "error",
                    "type": "object"
                  }
                ]
              }
            },
            "init-paths": {
              "runAfter": {},
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "paths",
                    "type": "array"
                  }
                ]
              }
            },
            "response-failure": {
              "runAfter": {
                "until-continuation": [
                  "Failed",
                  "TimedOut"
                ]
              },
              "type": "Response",
              "kind": "Http",
              "inputs": {
                "body": "@variables('error')",
                "statusCode": 500
              }
            },
            "until-continuation": {
              "actions": {
                "data-lake-list": {
                  "runAfter": {
                    "with-continuation": [
                      "Succeeded"
                    ]
                  },
                  "type": "Http",
                  "inputs": {
                    "authentication": {
                      "audience": "https://storage.azure.com",
                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('Identity Name'))]",
                      "type": "ManagedServiceIdentity"
                    },
                    "headers": {
                      "x-ms-version": "2019-07-07"
                    },
                    "method": "GET",
                    "uri": "@{outputs('with-continuation')}"
                  }
                },
                "set-continuation": {
                  "runAfter": {
                    "data-lake-list": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "continuation",
                    "value": "@{outputs('data-lake-list')['headers']?['x-ms-continuation']}"
                  }
                },
                "set-http-error": {
                  "inputs": {
                    "name": "error",
                    "value": {
                      "innerError": {
                        "body": "@body('data-lake-list')",
                        "code": "@outputs('data-lake-list')['statusCode']",
                        "headers": "@outputs('data-lake-list')['headers']"
                      }
                    }
                  },
                  "runAfter": {
                    "data-lake-list": [
                      "Failed",
                      "TimedOut"
                    ]

                  },
                  "type": "SetVariable"
                },
                "set-paths": {
                  "runAfter": {
                    "union-paths": [
                      "Succeeded"
                    ]
                  },
                  "type": "SetVariable",
                  "inputs": {
                    "name": "paths",
                    "value": "@outputs('union-paths')"
                  }
                },
                "filter-suffix": {
                  "inputs": {
                    "from": "@body('data-lake-list').paths",
                    "where": "@or(equals(item()?['isDirectory'], 'true'), endswith(item().name, coalesce(triggerBody()?['suffix'], '')))"
                  },
                  "runAfter": {
                    "set-continuation": [
                      "Succeeded"
                    ]
                  },
                  "type": "Query"
                },
                "union-paths": {
                  "inputs": "@union(variables('paths'), body('filter-suffix'))",
                  "runAfter": {
                    "filter-suffix": [
                      "Succeeded"
                    ]
                  },
                  "type": "Compose"
                },
                "with-continuation": {
                  "runAfter": {},
                  "type": "Compose",
                  "inputs": "@concat(outputs('with-directory'), if(equals('', variables('continuation')), '', concat('&continuation=', encodeUriComponent(variables('continuation')))))"
                }
              },
              "runAfter": {
                "with-directory": [
                  "Succeeded"
                ]
              },
              "expression": "@equals(variables('continuation'), '')",
              "limit": {
                "count": 60,
                "timeout": "PT1H"
              },
              "type": "Until"
            },
            "with-directory": {
              "runAfter": {
                "base-url": [
                  "Succeeded"
                ]
              },
              "type": "Compose",
              "inputs": "@if(equals('', coalesce(triggerBody()?['directory'], '')), outputs('base-url'), concat(outputs('base-url'), '&directory=', encodeUriComponent(triggerBody()?['directory'])))"
            }
          },
          "outputs": {}
        },
        "parameters": {}
      }
    }
  ],
  "outputs": {
    "id": {
      "type": "object",
      "value": "[reference(variables('Identity Name'), '2018-11-30')]"
    },
    "id2": {
      "type": "string",
      "value": "[reference(variables('Identity Name'), '2018-11-30').principalId]"
    }
  }
}